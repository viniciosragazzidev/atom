// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?

  @@map("users")
}

model Profile {
  id        String  @id @default(cuid())
  name      String
  surname   String
  password  String?
  birthdate String
  gender    String
  document  String
  email     String
  phone     String
  address   String?
  city      String?
  state     String?

  User       User[]
  Company    Company[]
  Unit       Unit[]
  Employee   EmployeeProfile? @relation(fields: [employeeId], references: [id])
  employeeId String?
}

model Company {
  id                  String  @id @default(cuid())
  name                String
  document            String
  fundationDate       String
  inscEstadual        String?
  inscMunicipal       String?
  areasOfActivity     String
  email               String
  phone               String
  street              String
  numberAddress       String
  neighborhoodAddress String
  city                String
  state               String
  zipCode             String
  slug                String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  ownerId          String?
  owner            Profile?          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  Units            Unit[]
  EmployeeProfiles EmployeeProfile[]
}

model Unit {
  id                     String                   @id @default(cuid())
  name                   String
  email                  String
  phone                  String
  userManagerId          String?
  userManager            Profile?                 @relation(fields: [userManagerId], references: [id])
  street                 String
  numberAddress          String
  neighborhoodAddress    String
  city                   String
  state                  String
  zipCode                String
  slug                   String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @default(now())
  employees              UnitEmployees[]
  companyId              String?
  company                Company?                 @relation(fields: [companyId], references: [id], onDelete: Cascade)
  UnitOrdersService      UnitOrderService[]
  UnitOrderServiceClient UnitOrderServiceClient[]
}

model UnitEmployees {
  id         String           @id @default(cuid())
  employeeId String
  employee   EmployeeProfile? @relation(fields: [employeeId], references: [id])
  role       String           @default("user")
  Unit       Unit?            @relation(fields: [unitId], references: [id])
  unitId     String?
}

model EmployeeProfile {
  id        String    @id @default(cuid())
  profile   Profile[]
  role      String    @default("user")
  office    String
  companyId String?
  company   Company?  @relation(fields: [companyId], references: [id])

  UnitEmployees UnitEmployees[]
}

model UnitOrderService {
  id          Int     @id @default(autoincrement())
  description String?
  status      String  @default("Aberto")

  unitId String?
  unit   Unit?   @relation(fields: [unitId], references: [id])

  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  amountValue              String
  UnitOrderServiceClient   UnitOrderServiceClient? @relation(fields: [unitOrderServiceClientId], references: [id])
  unitOrderServiceClientId Int?
  UnitOrderServiceItems    UnitOrderServiceItem[]
}

model UnitOrderServiceItem {
  id                    String   @id @default(cuid())
  name                  String
  brand                 String
  model                 String
  numberSerie           String
  color                 String
  status                String
  occurrenceDescription String
  accessories           String[]
  images                String[]
  coustAmountValue      String // Considere mudar para Decimal se for valor monetário
  amountValue           String // Considere mudar para Decimal se for valor monetário
  garantyDays           String
  paymentType           String // Considere usar Enum se houver valores específicos permitidos
  employeeId            String
  finallyDescription    String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  unitOrderServiceId Int?
  unitOrderService   UnitOrderService? @relation(fields: [unitOrderServiceId], references: [id])
}

model UnitOrderServiceClient {
  id                  Int                @id @default(autoincrement())
  name                String
  document            String             @unique
  phone               String
  email               String?            @unique
  street              String
  numberAddress       String
  neighborhoodAddress String
  city                String
  state               String
  zipCode             String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  UnitOrderServices   UnitOrderService[]
  unitId              String?
  unit                Unit?              @relation(fields: [unitId], references: [id])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
